{"version":3,"file":"slate-plain-serializer.es.js","sources":["../src/index.js"],"sourcesContent":["import { Block, Mark, Node, Value } from 'slate'\nimport { Set } from 'immutable'\n\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\nfunction deserialize(string, options = {}) {\n  let { defaultBlock = 'line', defaultMarks = [], toJSON = false } = options\n\n  if (Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray()\n  }\n\n  defaultBlock = Node.createProperties(defaultBlock)\n  defaultMarks = defaultMarks.map(Mark.createProperties)\n\n  const json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split('\\n').map(line => {\n        return {\n          ...defaultBlock,\n          object: 'block',\n          isVoid: false,\n          data: {},\n          nodes: [\n            {\n              object: 'text',\n              leaves: [\n                {\n                  object: 'leaf',\n                  text: line,\n                  marks: defaultMarks,\n                },\n              ],\n            },\n          ],\n        }\n      }),\n    },\n  }\n\n  const ret = toJSON ? json : Value.fromJSON(json)\n  return ret\n}\n\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value) {\n  return serializeNode(value.document)\n}\n\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node) {\n  if (\n    node.object == 'document' ||\n    (node.object == 'block' && Block.isBlockList(node.nodes))\n  ) {\n    return node.nodes.map(serializeNode).join('\\n')\n  } else {\n    return node.text\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  deserialize,\n  serialize,\n}\n"],"names":["deserialize","string","options","defaultBlock","defaultMarks","toJSON","Set","isSet","toArray","Node","createProperties","map","Mark","json","split","line","ret","Value","fromJSON","serialize","value","serializeNode","document","node","object","Block","isBlockList","nodes","join","text"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;AAWA,SAASA,WAAT,CAAqBC,MAArB,EAA2C;MAAdC,OAAc,uEAAJ,EAAI;8BAC0BA,OAD1B,CACnCC,YADmC;MACnCA,YADmC,yCACpB,MADoB;8BAC0BD,OAD1B,CACZE,YADY;MACZA,YADY,yCACG,EADH;wBAC0BF,OAD1B,CACOG,MADP;MACOA,MADP,mCACgB,KADhB;;;MAGrCC,IAAIC,KAAJ,CAAUH,YAAV,CAAJ,EAA6B;mBACZA,aAAaI,OAAb,EAAf;;;iBAGaC,KAAKC,gBAAL,CAAsBP,YAAtB,CAAf;iBACeC,aAAaO,GAAb,CAAiBC,KAAKF,gBAAtB,CAAf;;MAEMG,OAAO;YACH,OADG;cAED;cACA,UADA;YAEF,EAFE;aAGDZ,OAAOa,KAAP,CAAa,IAAb,EAAmBH,GAAnB,CAAuB,gBAAQ;4BAE/BR,YADL;kBAEU,OAFV;kBAGU,KAHV;gBAIQ,EAJR;iBAKS,CACL;oBACU,MADV;oBAEU,CACN;sBACU,MADV;oBAEQY,IAFR;qBAGSX;aAJH;WAHL;;OANJ;;GALX;;MA4BMY,MAAMX,SAASQ,IAAT,GAAgBI,MAAMC,QAAN,CAAeL,IAAf,CAA5B;SACOG,GAAP;;;;;;;;;;AAUF,SAASG,SAAT,CAAmBC,KAAnB,EAA0B;SACjBC,cAAcD,MAAME,QAApB,CAAP;;;;;;;;;;AAUF,SAASD,aAAT,CAAuBE,IAAvB,EAA6B;MAEzBA,KAAKC,MAAL,IAAe,UAAf,IACCD,KAAKC,MAAL,IAAe,OAAf,IAA0BC,MAAMC,WAAN,CAAkBH,KAAKI,KAAvB,CAF7B,EAGE;WACOJ,KAAKI,KAAL,CAAWhB,GAAX,CAAeU,aAAf,EAA8BO,IAA9B,CAAmC,IAAnC,CAAP;GAJF,MAKO;WACEL,KAAKM,IAAZ;;;;;;;;;;AAUJ,YAAe;0BAAA;;CAAf;;;;"}