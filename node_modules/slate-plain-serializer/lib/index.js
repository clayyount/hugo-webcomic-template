'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slate = require('slate');

var _immutable = require('immutable');

/**
 * Deserialize a plain text `string` to a Slate value.
 *
 * @param {String} string
 * @param {Object} options
 *   @property {Boolean} toJSON
 *   @property {String|Object|Block} defaultBlock
 *   @property {Array|Set} defaultMarks
 * @return {Value}
 */

function deserialize(string) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$defaultBlock = options.defaultBlock,
      defaultBlock = _options$defaultBlock === undefined ? 'line' : _options$defaultBlock,
      _options$defaultMarks = options.defaultMarks,
      defaultMarks = _options$defaultMarks === undefined ? [] : _options$defaultMarks,
      _options$toJSON = options.toJSON,
      toJSON = _options$toJSON === undefined ? false : _options$toJSON;


  if (_immutable.Set.isSet(defaultMarks)) {
    defaultMarks = defaultMarks.toArray();
  }

  defaultBlock = _slate.Node.createProperties(defaultBlock);
  defaultMarks = defaultMarks.map(_slate.Mark.createProperties);

  var json = {
    kind: 'value',
    document: {
      kind: 'document',
      data: {},
      nodes: string.split('\n').map(function (line) {
        return _extends({}, defaultBlock, {
          kind: 'block',
          isVoid: false,
          data: {},
          nodes: [{
            kind: 'text',
            leaves: [{
              kind: 'leaf',
              text: line,
              marks: defaultMarks
            }]
          }]
        });
      })
    }
  };

  var ret = toJSON ? json : _slate.Value.fromJSON(json);
  return ret;
}

/**
 * Serialize a Slate `value` to a plain text string.
 *
 * @param {Value} value
 * @return {String}
 */

function serialize(value) {
  return serializeNode(value.document);
}

/**
 * Serialize a `node` to plain text.
 *
 * @param {Node} node
 * @return {String}
 */

function serializeNode(node) {
  if (node.kind == 'document' || node.kind == 'block' && _slate.Block.isBlockList(node.nodes)) {
    return node.nodes.map(serializeNode).join('\n');
  } else {
    return node.text;
  }
}

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = {
  deserialize: deserialize,
  serialize: serialize
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZXNlcmlhbGl6ZSIsInN0cmluZyIsIm9wdGlvbnMiLCJkZWZhdWx0QmxvY2siLCJkZWZhdWx0TWFya3MiLCJ0b0pTT04iLCJpc1NldCIsInRvQXJyYXkiLCJjcmVhdGVQcm9wZXJ0aWVzIiwibWFwIiwianNvbiIsImtpbmQiLCJkb2N1bWVudCIsImRhdGEiLCJub2RlcyIsInNwbGl0IiwibGluZSIsImlzVm9pZCIsImxlYXZlcyIsInRleHQiLCJtYXJrcyIsInJldCIsImZyb21KU09OIiwic2VyaWFsaXplIiwidmFsdWUiLCJzZXJpYWxpemVOb2RlIiwibm9kZSIsImlzQmxvY2tMaXN0Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUFXQSxTQUFTQSxXQUFULENBQXFCQyxNQUFyQixFQUEyQztBQUFBLE1BQWRDLE9BQWMsdUVBQUosRUFBSTtBQUFBLDhCQUtyQ0EsT0FMcUMsQ0FFdkNDLFlBRnVDO0FBQUEsTUFFdkNBLFlBRnVDLHlDQUV4QixNQUZ3QjtBQUFBLDhCQUtyQ0QsT0FMcUMsQ0FHdkNFLFlBSHVDO0FBQUEsTUFHdkNBLFlBSHVDLHlDQUd4QixFQUh3QjtBQUFBLHdCQUtyQ0YsT0FMcUMsQ0FJdkNHLE1BSnVDO0FBQUEsTUFJdkNBLE1BSnVDLG1DQUk5QixLQUo4Qjs7O0FBT3pDLE1BQUksZUFBSUMsS0FBSixDQUFVRixZQUFWLENBQUosRUFBNkI7QUFDM0JBLG1CQUFlQSxhQUFhRyxPQUFiLEVBQWY7QUFDRDs7QUFFREosaUJBQWUsWUFBS0ssZ0JBQUwsQ0FBc0JMLFlBQXRCLENBQWY7QUFDQUMsaUJBQWVBLGFBQWFLLEdBQWIsQ0FBaUIsWUFBS0QsZ0JBQXRCLENBQWY7O0FBRUEsTUFBTUUsT0FBTztBQUNYQyxVQUFNLE9BREs7QUFFWEMsY0FBVTtBQUNSRCxZQUFNLFVBREU7QUFFUkUsWUFBTSxFQUZFO0FBR1JDLGFBQU9iLE9BQU9jLEtBQVAsQ0FBYSxJQUFiLEVBQW1CTixHQUFuQixDQUF1QixVQUFDTyxJQUFELEVBQVU7QUFDdEMsNEJBQ0tiLFlBREw7QUFFRVEsZ0JBQU0sT0FGUjtBQUdFTSxrQkFBUSxLQUhWO0FBSUVKLGdCQUFNLEVBSlI7QUFLRUMsaUJBQU8sQ0FDTDtBQUNFSCxrQkFBTSxNQURSO0FBRUVPLG9CQUFRLENBQ047QUFDRVAsb0JBQU0sTUFEUjtBQUVFUSxvQkFBTUgsSUFGUjtBQUdFSSxxQkFBT2hCO0FBSFQsYUFETTtBQUZWLFdBREs7QUFMVDtBQWtCRCxPQW5CTTtBQUhDO0FBRkMsR0FBYjs7QUE0QkEsTUFBTWlCLE1BQU1oQixTQUFTSyxJQUFULEdBQWdCLGFBQU1ZLFFBQU4sQ0FBZVosSUFBZixDQUE1QjtBQUNBLFNBQU9XLEdBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFNBQVNFLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3hCLFNBQU9DLGNBQWNELE1BQU1aLFFBQXBCLENBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFNBQVNhLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCO0FBQzNCLE1BQ0dBLEtBQUtmLElBQUwsSUFBYSxVQUFkLElBQ0NlLEtBQUtmLElBQUwsSUFBYSxPQUFiLElBQXdCLGFBQU1nQixXQUFOLENBQWtCRCxLQUFLWixLQUF2QixDQUYzQixFQUdFO0FBQ0EsV0FBT1ksS0FBS1osS0FBTCxDQUFXTCxHQUFYLENBQWVnQixhQUFmLEVBQThCRyxJQUE5QixDQUFtQyxJQUFuQyxDQUFQO0FBQ0QsR0FMRCxNQUtPO0FBQ0wsV0FBT0YsS0FBS1AsSUFBWjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7OztrQkFNZTtBQUNibkIsMEJBRGE7QUFFYnVCO0FBRmEsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQmxvY2ssIE1hcmssIE5vZGUsIFZhbHVlIH0gZnJvbSAnc2xhdGUnXG5pbXBvcnQgeyBTZXQgfSBmcm9tICdpbW11dGFibGUnXG5cbi8qKlxuICogRGVzZXJpYWxpemUgYSBwbGFpbiB0ZXh0IGBzdHJpbmdgIHRvIGEgU2xhdGUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgQHByb3BlcnR5IHtCb29sZWFufSB0b0pTT05cbiAqICAgQHByb3BlcnR5IHtTdHJpbmd8T2JqZWN0fEJsb2NrfSBkZWZhdWx0QmxvY2tcbiAqICAgQHByb3BlcnR5IHtBcnJheXxTZXR9IGRlZmF1bHRNYXJrc1xuICogQHJldHVybiB7VmFsdWV9XG4gKi9cblxuZnVuY3Rpb24gZGVzZXJpYWxpemUoc3RyaW5nLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBkZWZhdWx0QmxvY2sgPSAnbGluZScsXG4gICAgZGVmYXVsdE1hcmtzID0gW10sXG4gICAgdG9KU09OID0gZmFsc2UsXG4gIH0gPSBvcHRpb25zXG5cbiAgaWYgKFNldC5pc1NldChkZWZhdWx0TWFya3MpKSB7XG4gICAgZGVmYXVsdE1hcmtzID0gZGVmYXVsdE1hcmtzLnRvQXJyYXkoKVxuICB9XG5cbiAgZGVmYXVsdEJsb2NrID0gTm9kZS5jcmVhdGVQcm9wZXJ0aWVzKGRlZmF1bHRCbG9jaylcbiAgZGVmYXVsdE1hcmtzID0gZGVmYXVsdE1hcmtzLm1hcChNYXJrLmNyZWF0ZVByb3BlcnRpZXMpXG5cbiAgY29uc3QganNvbiA9IHtcbiAgICBraW5kOiAndmFsdWUnLFxuICAgIGRvY3VtZW50OiB7XG4gICAgICBraW5kOiAnZG9jdW1lbnQnLFxuICAgICAgZGF0YToge30sXG4gICAgICBub2Rlczogc3RyaW5nLnNwbGl0KCdcXG4nKS5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5kZWZhdWx0QmxvY2ssXG4gICAgICAgICAga2luZDogJ2Jsb2NrJyxcbiAgICAgICAgICBpc1ZvaWQ6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgIG5vZGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGtpbmQ6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgbGVhdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2luZDogJ2xlYWYnLFxuICAgICAgICAgICAgICAgICAgdGV4dDogbGluZSxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBkZWZhdWx0TWFya3MsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICB9XG4gIH1cblxuICBjb25zdCByZXQgPSB0b0pTT04gPyBqc29uIDogVmFsdWUuZnJvbUpTT04oanNvbilcbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIFNsYXRlIGB2YWx1ZWAgdG8gYSBwbGFpbiB0ZXh0IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1ZhbHVlfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICByZXR1cm4gc2VyaWFsaXplTm9kZSh2YWx1ZS5kb2N1bWVudClcbn1cblxuLyoqXG4gKiBTZXJpYWxpemUgYSBgbm9kZWAgdG8gcGxhaW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVOb2RlKG5vZGUpIHtcbiAgaWYgKFxuICAgIChub2RlLmtpbmQgPT0gJ2RvY3VtZW50JykgfHxcbiAgICAobm9kZS5raW5kID09ICdibG9jaycgJiYgQmxvY2suaXNCbG9ja0xpc3Qobm9kZS5ub2RlcykpXG4gICkge1xuICAgIHJldHVybiBub2RlLm5vZGVzLm1hcChzZXJpYWxpemVOb2RlKS5qb2luKCdcXG4nKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2RlLnRleHRcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGVzZXJpYWxpemUsXG4gIHNlcmlhbGl6ZVxufVxuIl19