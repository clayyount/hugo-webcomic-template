"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.responseParser = exports.parseResponse = exports.filterByPropExtension = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _immutable = require("immutable");

var _path = require("./path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const filterByPropExtension = (extension, propName) => arr => arr.filter(el => (0, _path.fileExtension)((0, _get2.default)(el, propName)) === extension);

exports.filterByPropExtension = filterByPropExtension;

const catchFormatErrors = (format, formatter) => res => {
  try {
    return formatter(res);
  } catch (err) {
    throw new Error("Response cannot be parsed into the expected format (".concat(format, "): ").concat(err.message));
  }
};

const responseFormatters = (0, _immutable.fromJS)({
  json: async res => {
    const contentType = res.headers.get('Content-Type');

    if (!contentType.startsWith('application/json') && !contentType.startsWith('text/json')) {
      throw new Error("".concat(contentType, " is not a valid JSON Content-Type"));
    }

    return res.json();
  },
  text: async res => res.text(),
  blob: async res => res.blob()
}).mapEntries((_ref) => {
  let [format, formatter] = _ref;
  return [format, catchFormatErrors(format, formatter)];
});

const parseResponse = async function parseResponse(res) {
  let {
    expectingOk = true,
    format = 'text'
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (expectingOk && !res.ok) {
    throw new Error("Expected an ok response, but received an error status: ".concat(res.status, "."));
  }

  const formatter = responseFormatters.get(format, false);

  if (!formatter) {
    throw new Error("".concat(format, " is not a supported response format."));
  }

  const body = await formatter(res);
  return body;
};

exports.parseResponse = parseResponse;

const responseParser = options => res => parseResponse(res, options);

exports.responseParser = responseParser;