"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withFileControl;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _once2 = _interopRequireDefault(require("lodash/once"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _v = _interopRequireDefault(require("uuid/v4"));

var _commonTags = require("common-tags");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  Netlify CMS config: ", " field: property \"options\" has been deprecated for the\n  ", " widget and will be removed in the next major release. Rather than\n  `field.options.media_library`, apply media library options for this widget under\n  `field.media_library`.\n"], ["\n  Netlify CMS config: ", " field: property \"options\" has been deprecated for the\n  ", " widget and will be removed in the next major release. Rather than\n  \\`field.options.media_library\\`, apply media library options for this widget under\n  \\`field.media_library\\`.\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = (0, _styledBase.default)("div", {
  target: "e1awjdnj0",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", _netlifyCmsUiDefault.borders.textField, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";", _netlifyCmsUiDefault.effects.checkerboard, ";", _netlifyCmsUiDefault.shadows.inset, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Image = (0, _styledBase.default)("img", {
  target: "e1awjdnj1",
  label: "Image"
})(process.env.NODE_ENV === "production" ? {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;"
} : {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const MultiImageWrapper = (0, _styledBase.default)("div", {
  target: "e1awjdnj2",
  label: "MultiImageWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "2imjyh",
  styles: "display:flex;flex-wrap:wrap;"
} : {
  name: "2imjyh",
  styles: "display:flex;flex-wrap:wrap;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const FileLink = (0, _styledBase.default)("a", {
  target: "e1awjdnj3",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const FileLinks = (0, _styledBase.default)("div", {
  target: "e1awjdnj4",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const FileLinkList = (0, _styledBase.default)("ul", {
  target: "e1awjdnj5",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "155za0w",
  styles: "list-style-type:none;"
} : {
  name: "155za0w",
  styles: "list-style-type:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const FileWidgetButton = (0, _styledBase.default)("button", {
  target: "e1awjdnj6",
  label: "FileWidgetButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badge, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const FileWidgetButtonRemove = (0, _styledBase.default)("button", {
  target: "e1awjdnj7",
  label: "FileWidgetButtonRemove"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badgeDanger, ";margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

function isMultiple(value) {
  return Array.isArray(value) || _immutable.List.isList(value);
}

const warnDeprecatedOptions = (0, _once2.default)(field => console.warn((0, _commonTags.oneLine)(_templateObject(), field.get('name'), field.get('widget'))));

function withFileControl() {
  var _class, _temp;

  let {
    forImage
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _temp = _class = class FileControl extends _react.default.Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "handleChange", e => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        e.preventDefault();
        let mediaLibraryFieldOptions;
        /**
         * `options` hash as a general field property is deprecated, only used
         * when external media libraries were first introduced. Not to be
         * confused with `options` for the select widget, which serves a different
         * purpose.
         */

        if (field.hasIn(['options', 'media_library'])) {
          warnDeprecatedOptions(field);
          mediaLibraryFieldOptions = field.getIn(['options', 'media_library'], (0, _immutable.Map)());
        } else {
          mediaLibraryFieldOptions = field.get('media_library', (0, _immutable.Map)());
        }

        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value,
          allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
          config: mediaLibraryFieldOptions.get('config')
        });
      });

      _defineProperty(this, "handleRemove", e => {
        e.preventDefault();
        this.props.onClearMediaControl(this.controlID);
        return this.props.onChange('');
      });

      _defineProperty(this, "renderFileLink", value => {
        const size = MAX_DISPLAY_LENGTH;

        if (!value || value.length <= size) {
          return value;
        }

        const text = "".concat(value.substring(0, size / 2), "\u2026").concat(value.substring(value.length - size / 2 + 1, value.length));
        return _react.default.createElement(FileLink, {
          href: value,
          rel: "noopener",
          target: "_blank"
        }, text);
      });

      _defineProperty(this, "renderFileLinks", () => {
        const {
          value
        } = this.props;

        if (isMultiple(value)) {
          return _react.default.createElement(FileLinks, null, _react.default.createElement(FileLinkList, null, value.map(val => _react.default.createElement("li", {
            key: val
          }, this.renderFileLink(val)))));
        }

        return _react.default.createElement(FileLinks, null, this.renderFileLink(value));
      });

      _defineProperty(this, "renderImages", () => {
        const {
          getAsset,
          value
        } = this.props;

        if (isMultiple(value)) {
          return _react.default.createElement(MultiImageWrapper, null, value.map(val => _react.default.createElement(ImageWrapper, {
            key: val
          }, _react.default.createElement(Image, {
            src: getAsset(val)
          }))));
        }

        return _react.default.createElement(ImageWrapper, null, _react.default.createElement(Image, {
          src: getAsset(value)
        }));
      });

      _defineProperty(this, "renderSelection", subject => _react.default.createElement("div", null, forImage ? this.renderImages() : null, _react.default.createElement("div", null, forImage ? null : this.renderFileLinks(), _react.default.createElement(FileWidgetButton, {
        onClick: this.handleChange
      }, "Choose different ", subject), _react.default.createElement(FileWidgetButtonRemove, {
        onClick: this.handleRemove
      }, "Remove ", subject))));

      _defineProperty(this, "renderNoSelection", (subject, article) => _react.default.createElement(FileWidgetButton, {
        onClick: this.handleChange
      }, "Choose ", article, " ", subject));

      this.controlID = (0, _v.default)();
    }

    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value changes.
       */
      if (this.props.value !== nextProps.value) {
        return true;
      }
      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */


      const mediaPath = nextProps.mediaPaths.get(this.controlID);

      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }

      return false;
    }

    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);

      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }

    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }

    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      const article = forImage ? 'an' : 'a';
      return _react.default.createElement("div", {
        className: classNameWrapper
      }, _react.default.createElement("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject, article)));
    }

  }, _defineProperty(_class, "propTypes", {
    field: _propTypes.default.object.isRequired,
    getAsset: _propTypes.default.func.isRequired,
    mediaPaths: _reactImmutableProptypes.default.map.isRequired,
    onAddAsset: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onRemoveInsertedMedia: _propTypes.default.func.isRequired,
    onOpenMediaLibrary: _propTypes.default.func.isRequired,
    onClearMediaControl: _propTypes.default.func.isRequired,
    onRemoveMediaControl: _propTypes.default.func.isRequired,
    classNameWrapper: _propTypes.default.string.isRequired,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)])
  }), _defineProperty(_class, "defaultProps", {
    value: ''
  }), _temp;
}