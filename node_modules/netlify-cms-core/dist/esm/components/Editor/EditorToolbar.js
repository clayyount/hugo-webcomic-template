"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _immutable = require("immutable");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _SettingsDropdown = _interopRequireDefault(require("../UI/SettingsDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const styles = {
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;"
  } : {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  toolbarSection:
  /*#__PURE__*/
  (0, _core.css)("height:100%;display:flex;align-items:center;border:0 solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe0",
  label: "ToolbarContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;"
} : {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ToolbarSectionMain = (0, _styledBase.default)("div", {
  target: "evqrzhe1",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = (0, _styledBase.default)("div", {
  target: "evqrzhe2",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "70qvj9",
  styles: "display:flex;align-items:center;"
} : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ToolbarSubSectionLast = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarSubSectionFirst, {
  target: "evqrzhe3",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1a9getn",
  styles: "justify-content:flex-end;"
} : {
  name: "1a9getn",
  styles: "justify-content:flex-end;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ToolbarSectionBackLink = (
/*#__PURE__*/
0, _styledBase.default)(_reactRouterDom.Link, {
  target: "evqrzhe4",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = (0, _styledBase.default)("div", {
  target: "evqrzhe5",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.Dropdown, {
  target: "evqrzhe6",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = (0, _styledBase.default)("div", {
  target: "evqrzhe7",
  label: "BackArrow"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = (0, _styledBase.default)("div", {
  target: "evqrzhe8",
  label: "BackCollection"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = (0, _styledBase.default)("div", {
  target: "evqrzhe9",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "19ug521",
  styles: "margin-top:6px;"
} : {
  name: "19ug521",
  styles: "margin-top:6px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const BackStatusUnchanged = (
/*#__PURE__*/
0, _styledBase.default)(BackStatus, {
  target: "evqrzhe10",
  label: "BackStatusUnchanged"
})(_netlifyCmsUiDefault.components.textBadgeSuccess, ";&::after{height:12px;width:15.5px;color:", _netlifyCmsUiDefault.colors.successText, ";margin-left:5px;position:relative;top:1px;content:url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' width='15' height='11'><path fill='#005614' fill-rule='nonzero' d='M4.016 11l-.648-.946a6.202 6.202 0 0 0-.157-.22 9.526 9.526 0 0 1-.096-.133l-.511-.7a7.413 7.413 0 0 0-.162-.214l-.102-.134-.265-.346a26.903 26.903 0 0 0-.543-.687l-.11-.136c-.143-.179-.291-.363-.442-.54l-.278-.332a8.854 8.854 0 0 0-.192-.225L.417 6.28l-.283-.324L0 5.805l1.376-1.602c.04.027.186.132.186.132l.377.272.129.095c.08.058.16.115.237.175l.37.28c.192.142.382.292.565.436l.162.126c.27.21.503.398.714.574l.477.393c.078.064.156.127.23.194l.433.375.171-.205A50.865 50.865 0 0 1 8.18 4.023a35.163 35.163 0 0 1 2.382-2.213c.207-.174.42-.349.635-.518l.328-.255.333-.245c.072-.055.146-.107.221-.159l.117-.083c.11-.077.225-.155.341-.23.163-.11.334-.217.503-.32l1.158 1.74a11.908 11.908 0 0 0-.64.55l-.065.06c-.07.062-.139.125-.207.192l-.258.249-.26.265c-.173.176-.345.357-.512.539a32.626 32.626 0 0 0-1.915 2.313 52.115 52.115 0 0 0-2.572 3.746l-.392.642-.19.322-.233.382H4.016z'/></svg>\");}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = (
/*#__PURE__*/
0, _styledBase.default)(BackStatus, {
  target: "evqrzhe11",
  label: "BackStatusChanged"
})(_netlifyCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = (0, _styledBase.default)("button", {
  target: "evqrzhe12",
  label: "ToolbarButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";display:block;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DeleteButton = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe13",
  label: "DeleteButton"
})(_netlifyCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe14",
  label: "SaveButton"
})(_netlifyCmsUiDefault.buttons.lightBlue, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusPublished = (0, _styledBase.default)("div", {
  target: "evqrzhe15",
  label: "StatusPublished"
})(styles.buttonMargin, ";border:1px solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";background-color:", _netlifyCmsUiDefault.colorsRaw.white, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";padding:0 24px;line-height:36px;cursor:default;font-size:14px;font-weight:500;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishButton = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe16",
  label: "PublishButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe17",
  label: "StatusButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe18",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.blue, ";}", _netlifyCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = (0, _styledBase.default)("button", {
  target: "evqrzhe19",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "evqrzhe21",
  label: "PreviewLink"
});
const StatusDropdownItem = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.DropdownItem, {
  target: "evqrzhe20",
  label: "StatusDropdownItem"
})(_netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class EditorToolbar extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "renderSimpleSaveControls", () => {
      const {
        showDelete,
        onDelete,
        t
      } = this.props;
      return _react.default.createElement("div", null, showDelete ? _react.default.createElement(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null);
    });

    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = (0, _immutable.Map)(),
        loadDeployPreview,
        t
      } = this.props;
      const url = deployPreview.get('url');
      const status = deployPreview.get('status');

      if (!status) {
        return;
      }

      const isFetching = deployPreview.get('isFetching');
      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return _react.default.createElement(PreviewButtonContainer, null, deployPreviewReady ? _react.default.createElement(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, _react.default.createElement("span", null, label), _react.default.createElement(_netlifyCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : _react.default.createElement(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, _react.default.createElement("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), _react.default.createElement(_netlifyCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });

    _defineProperty(this, "renderSimplePublishControls", () => {
      const {
        collection,
        onPersist,
        onPersistAndNew,
        isPersisting,
        hasChanged,
        isNewEntry,
        t
      } = this.props;

      if (!isNewEntry && !hasChanged) {
        return _react.default.createElement(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), _react.default.createElement(StatusPublished, null, t('editor.editorToolbar.published')));
      }

      return _react.default.createElement("div", null, _react.default.createElement(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => _react.default.createElement(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
        label: "Publish now",
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), collection.get('create') ? _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }) : null));
    });

    _defineProperty(this, "renderWorkflowSaveControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        t
      } = this.props;
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [_react.default.createElement(SaveButton, {
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), !showDelete && !hasUnpublishedChanges && !isModification ? null : _react.default.createElement(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });

    _defineProperty(this, "renderWorkflowPublishControls", () => {
      const {
        collection,
        isUpdatingStatus,
        isPublishing,
        onChangeStatus,
        onPublish,
        onPublishAndNew,
        currentStatus,
        isNewEntry,
        t
      } = this.props;

      if (currentStatus) {
        return _react.default.createElement(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel')), _react.default.createElement(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "120px",
          renderButton: () => _react.default.createElement(StatusButton, null, isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.setStatus'))
        }, _react.default.createElement(StatusDropdownItem, {
          label: t('editor.editorToolbar.draft'),
          onClick: () => onChangeStatus('DRAFT'),
          icon: currentStatus === _publishModes.status.get('DRAFT') && 'check'
        }), _react.default.createElement(StatusDropdownItem, {
          label: t('editor.editorToolbar.inReview'),
          onClick: () => onChangeStatus('PENDING_REVIEW'),
          icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') && 'check'
        }), _react.default.createElement(StatusDropdownItem, {
          label: t('editor.editorToolbar.ready'),
          onClick: () => onChangeStatus('PENDING_PUBLISH'),
          icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') && 'check'
        })), _react.default.createElement(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => _react.default.createElement(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
        }, _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishNow'),
          icon: "arrow",
          iconDirection: "right",
          onClick: onPublish
        }), collection.get('create') ? _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishAndCreateNew'),
          icon: "add",
          onClick: onPublishAndNew
        }) : null));
      }
      /**
       * Publish control for published workflow entry.
       */


      if (!isNewEntry) {
        return _react.default.createElement(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), _react.default.createElement(StatusPublished, null, t('editor.editorToolbar.published')));
      }
    });
  }

  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t
    } = this.props;
    return _react.default.createElement(ToolbarContainer, null, _react.default.createElement(ToolbarSectionBackLink, {
      to: "/collections/".concat(collection.get('name'))
    }, _react.default.createElement(BackArrow, null, "\u2190"), _react.default.createElement("div", null, _react.default.createElement(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? _react.default.createElement(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : _react.default.createElement(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), _react.default.createElement(ToolbarSectionMain, null, _react.default.createElement(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowSaveControls() : this.renderSimpleSaveControls()), _react.default.createElement(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowPublishControls() : this.renderSimplePublishControls())), _react.default.createElement(ToolbarSectionMeta, null, _react.default.createElement(_SettingsDropdown.default, {
      displayUrl: displayUrl,
      imageUrl: user.get('avatar_url'),
      onLogoutClick: onLogoutClick
    })));
  }

}

_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(EditorToolbar);

exports.default = _default;