"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _reactPolyglot = require("react-polyglot");

var _reactRedux = require("react-redux");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _collections = require("../../actions/collections");

var _editorialWorkflow = require("../../actions/editorialWorkflow");

var _reducers = require("../../reducers");

var _publishModes = require("../../constants/publishModes");

var _WorkflowList = _interopRequireDefault(require("./WorkflowList"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const WorkflowContainer = (0, _styledBase.default)("div", {
  target: "eg19in30",
  label: "WorkflowContainer"
})("padding:", _netlifyCmsUiDefault.lengths.pageMargin, " 0;height:100vh;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaXNFZGl0b3JpYWxXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50OiByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgIC8+XG4gICAgICA8L1dvcmtmbG93Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc0VkaXRvcmlhbFdvcmtmbG93ID0gc3RhdGUuY29uZmlnLmdldCgncHVibGlzaF9tb2RlJykgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAge1xuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICB9LFxuKSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTop = (0, _styledBase.default)("div", {
  target: "eg19in31",
  label: "WorkflowTop"
})(_netlifyCmsUiDefault.components.cardTop, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaXNFZGl0b3JpYWxXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50OiByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgIC8+XG4gICAgICA8L1dvcmtmbG93Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc0VkaXRvcmlhbFdvcmtmbG93ID0gc3RhdGUuY29uZmlnLmdldCgncHVibGlzaF9tb2RlJykgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAge1xuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICB9LFxuKSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopRow = (0, _styledBase.default)("div", {
  target: "eg19in32",
  label: "WorkflowTopRow"
})("display:flex;justify-content:space-between;span[role='button']{", _netlifyCmsUiDefault.shadows.dropDeep, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DaUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaXNFZGl0b3JpYWxXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50OiByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgIC8+XG4gICAgICA8L1dvcmtmbG93Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc0VkaXRvcmlhbFdvcmtmbG93ID0gc3RhdGUuY29uZmlnLmdldCgncHVibGlzaF9tb2RlJykgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAge1xuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICB9LFxuKSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopHeading = (0, _styledBase.default)("h1", {
  target: "eg19in33",
  label: "WorkflowTopHeading"
})(_netlifyCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZDb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaXNFZGl0b3JpYWxXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50OiByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgIC8+XG4gICAgICA8L1dvcmtmbG93Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc0VkaXRvcmlhbFdvcmtmbG93ID0gc3RhdGUuY29uZmlnLmdldCgncHVibGlzaF9tb2RlJykgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAge1xuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICB9LFxuKSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopDescription = (0, _styledBase.default)("p", {
  target: "eg19in34",
  label: "WorkflowTopDescription"
})(_netlifyCmsUiDefault.components.cardTopDescription, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEdUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaXNFZGl0b3JpYWxXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50OiByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgIC8+XG4gICAgICA8L1dvcmtmbG93Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc0VkaXRvcmlhbFdvcmtmbG93ID0gc3RhdGUuY29uZmlnLmdldCgncHVibGlzaF9tb2RlJykgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAge1xuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICB9LFxuKSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));

class Workflow extends _react.Component {
  componentDidMount() {
    const {
      loadUnpublishedEntries,
      isEditorialWorkflow,
      collections
    } = this.props;

    if (isEditorialWorkflow) {
      loadUnpublishedEntries(collections);
    }
  }

  render() {
    const {
      isEditorialWorkflow,
      isFetching,
      unpublishedEntries,
      updateUnpublishedEntryStatus,
      publishUnpublishedEntry,
      deleteUnpublishedEntry,
      collections,
      t
    } = this.props;
    if (!isEditorialWorkflow) return null;
    if (isFetching) return _react.default.createElement(_netlifyCmsUiDefault.Loader, {
      active: true
    }, t('workflow.workflow.loading'));
    const reviewCount = unpublishedEntries.get('pending_review').size;
    const readyCount = unpublishedEntries.get('pending_publish').size;
    return _react.default.createElement(WorkflowContainer, null, _react.default.createElement(WorkflowTop, null, _react.default.createElement(WorkflowTopRow, null, _react.default.createElement(WorkflowTopHeading, null, t('workflow.workflow.workflowHeading')), _react.default.createElement(_netlifyCmsUiDefault.Dropdown, {
      dropdownWidth: "160px",
      dropdownPosition: "left",
      dropdownTopOverlap: "40px",
      renderButton: () => _react.default.createElement(_netlifyCmsUiDefault.StyledDropdownButton, null, t('workflow.workflow.newPost'))
    }, collections.filter(collection => collection.get('create')).toList().map(collection => _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label'),
      onClick: () => (0, _collections.createNewEntry)(collection.get('name'))
    })))), _react.default.createElement(WorkflowTopDescription, null, t('workflow.workflow.description', {
      smart_count: reviewCount,
      readyCount: readyCount
    }))), _react.default.createElement(_WorkflowList.default, {
      entries: unpublishedEntries,
      handleChangeStatus: updateUnpublishedEntryStatus,
      handlePublish: publishUnpublishedEntry,
      handleDelete: deleteUnpublishedEntry
    }));
  }

}

_defineProperty(Workflow, "propTypes", {
  collections: _reactImmutableProptypes.default.orderedMap,
  isEditorialWorkflow: _propTypes.default.bool.isRequired,
  isFetching: _propTypes.default.bool,
  unpublishedEntries: _reactImmutableProptypes.default.map,
  loadUnpublishedEntries: _propTypes.default.func.isRequired,
  updateUnpublishedEntryStatus: _propTypes.default.func.isRequired,
  publishUnpublishedEntry: _propTypes.default.func.isRequired,
  deleteUnpublishedEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

function mapStateToProps(state) {
  const {
    collections
  } = state;

  const isEditorialWorkflow = state.config.get('publish_mode') === _publishModes.EDITORIAL_WORKFLOW;

  const returnObj = {
    collections,
    isEditorialWorkflow
  };

  if (isEditorialWorkflow) {
    returnObj.isFetching = state.editorialWorkflow.getIn(['pages', 'isFetching'], false);
    /*
     * Generates an ordered Map of the available status as keys.
     * Each key containing a Sequence of available unpubhlished entries
     * Eg.: OrderedMap{'draft':Seq(), 'pending_review':Seq(), 'pending_publish':Seq()}
     */

    returnObj.unpublishedEntries = _publishModes.status.reduce((acc, currStatus) => {
      const entries = (0, _reducers.selectUnpublishedEntriesByStatus)(state, currStatus);
      return acc.set(currStatus, entries);
    }, (0, _immutable.OrderedMap)());
  }

  return returnObj;
}

var _default = (0, _reactRedux.connect)(mapStateToProps, {
  loadUnpublishedEntries: _editorialWorkflow.loadUnpublishedEntries,
  updateUnpublishedEntryStatus: _editorialWorkflow.updateUnpublishedEntryStatus,
  publishUnpublishedEntry: _editorialWorkflow.publishUnpublishedEntry,
  deleteUnpublishedEntry: _editorialWorkflow.deleteUnpublishedEntry
})((0, _reactPolyglot.translate)()(Workflow));

exports.default = _default;