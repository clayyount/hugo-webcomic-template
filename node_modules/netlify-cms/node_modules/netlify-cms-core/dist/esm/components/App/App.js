"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactHotLoader = require("react-hot-loader");

var _reactPolyglot = require("react-polyglot");

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _reduxNotifications = require("redux-notifications");

var _reactTopbarProgressIndicator = _interopRequireDefault(require("react-topbar-progress-indicator"));

var _config = require("../../actions/config");

var _auth = require("../../actions/auth");

var _backend = require("../../backend");

var _collections = require("../../actions/collections");

var _mediaLibrary = require("../../actions/mediaLibrary");

var _MediaLibrary = _interopRequireDefault(require("../MediaLibrary/MediaLibrary"));

var _UI = require("../UI");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _history = _interopRequireDefault(require("../../routing/history"));

var _publishModes = require("../../constants/publishModes");

var _Collection = _interopRequireDefault(require("../Collection/Collection"));

var _Workflow = _interopRequireDefault(require("../Workflow/Workflow"));

var _Editor = _interopRequireDefault(require("../Editor/Editor"));

var _NotFoundPage = _interopRequireDefault(require("./NotFoundPage"));

var _Header = _interopRequireDefault(require("./Header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_reactTopbarProgressIndicator.default.config({
  barColors: {
    '0': _netlifyCmsUiDefault.colors.active,
    '1.0': _netlifyCmsUiDefault.colors.active
  },
  shadowBlur: 0,
  barThickness: 2
});

const AppMainContainer = (0, _styledBase.default)("div", {
  target: "e1ghgnen0",
  label: "AppMainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "123tny7",
  styles: "min-width:800px;max-width:1440px;margin:0 auto;"
} : {
  name: "123tny7",
  styles: "min-width:800px;max-width:1440px;margin:0 auto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ErrorContainer = (0, _styledBase.default)("div", {
  target: "e1ghgnen1",
  label: "ErrorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "zwiamn",
  styles: "margin:20px;"
} : {
  name: "zwiamn",
  styles: "margin:20px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ErrorCodeBlock = (0, _styledBase.default)("pre", {
  target: "e1ghgnen2",
  label: "ErrorCodeBlock"
})(process.env.NODE_ENV === "production" ? {
  name: "1v6y79z",
  styles: "margin-left:20px;font-size:15px;line-height:1.5;"
} : {
  name: "1v6y79z",
  styles: "margin-left:20px;font-size:15px;line-height:1.5;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

class App extends _react.default.Component {
  configError(config) {
    const t = this.props.t;
    return _react.default.createElement(ErrorContainer, null, _react.default.createElement("h1", null, t('app.app.errorHeader')), _react.default.createElement("div", null, _react.default.createElement("strong", null, t('app.app.configErrors'), ":"), _react.default.createElement(ErrorCodeBlock, null, config.get('error')), _react.default.createElement("span", null, t('app.app.checkConfigYml'))));
  }

  componentDidMount() {
    const {
      loadConfig
    } = this.props;
    loadConfig();
  }

  handleLogin(credentials) {
    this.props.loginUser(credentials);
  }

  authenticating() {
    const {
      auth,
      t
    } = this.props;
    const backend = (0, _backend.currentBackend)(this.props.config);

    if (backend == null) {
      return _react.default.createElement("div", null, _react.default.createElement("h1", null, t('app.app.waitingBackend')));
    }

    return _react.default.createElement("div", null, _react.default.createElement(_reduxNotifications.Notifs, {
      CustomComponent: _UI.Toast
    }), _react.default.createElement(backend.authComponent(), {
      onLogin: this.handleLogin.bind(this),
      error: auth && auth.get('error'),
      isFetching: auth && auth.get('isFetching'),
      inProgress: auth && auth.get('isFetching') || false,
      siteId: this.props.config.getIn(['backend', 'site_domain']),
      base_url: this.props.config.getIn(['backend', 'base_url'], null),
      authEndpoint: this.props.config.getIn(['backend', 'auth_endpoint']),
      config: this.props.config,
      clearHash: () => _history.default.replace('/')
    }));
  }

  handleLinkClick(event, handler) {
    event.preventDefault();

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    handler(...args);
  }

  render() {
    const {
      user,
      config,
      collections,
      logoutUser,
      isFetching,
      publishMode,
      useMediaLibrary,
      openMediaLibrary,
      t,
      showMediaButton
    } = this.props;

    if (config === null) {
      return null;
    }

    if (config.get('error')) {
      return this.configError(config);
    }

    if (config.get('isFetching')) {
      return _react.default.createElement(_netlifyCmsUiDefault.Loader, {
        active: true
      }, t('app.app.loadingConfig'));
    }

    if (user == null) {
      return this.authenticating(t);
    }

    const defaultPath = "/collections/".concat(collections.first().get('name'));
    const hasWorkflow = publishMode === _publishModes.EDITORIAL_WORKFLOW;
    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reduxNotifications.Notifs, {
      CustomComponent: _UI.Toast
    }), _react.default.createElement(_Header.default, {
      user: user,
      collections: collections,
      onCreateEntryClick: _collections.createNewEntry,
      onLogoutClick: logoutUser,
      openMediaLibrary: openMediaLibrary,
      hasWorkflow: hasWorkflow,
      displayUrl: config.get('display_url'),
      showMediaButton: showMediaButton
    }), _react.default.createElement(AppMainContainer, null, isFetching && _react.default.createElement(_reactTopbarProgressIndicator.default, null), _react.default.createElement(_reactRouterDom.Switch, null, _react.default.createElement(_reactRouterDom.Redirect, {
      exact: true,
      from: "/",
      to: defaultPath
    }), _react.default.createElement(_reactRouterDom.Redirect, {
      exact: true,
      from: "/search/",
      to: defaultPath
    }), hasWorkflow ? _react.default.createElement(_reactRouterDom.Route, {
      path: "/workflow",
      component: _Workflow.default
    }) : null, _react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: "/collections/:name",
      render: props => {
        const collectionExists = collections.get(props.match.params.name);
        return collectionExists ? _react.default.createElement(_Collection.default, props) : _react.default.createElement(_reactRouterDom.Redirect, {
          to: defaultPath
        });
      }
    }), _react.default.createElement(_reactRouterDom.Route, {
      path: "/collections/:name/new",
      render: props => _react.default.createElement(_Editor.default, _extends({}, props, {
        newRecord: true
      }))
    }), _react.default.createElement(_reactRouterDom.Route, {
      path: "/collections/:name/entries/:slug",
      component: _Editor.default
    }), _react.default.createElement(_reactRouterDom.Route, {
      path: "/search/:searchTerm",
      render: props => _react.default.createElement(_Collection.default, _extends({}, props, {
        isSearchResults: true
      }))
    }), _react.default.createElement(_reactRouterDom.Route, {
      component: _NotFoundPage.default
    })), useMediaLibrary ? _react.default.createElement(_MediaLibrary.default, null) : null));
  }

}

_defineProperty(App, "propTypes", {
  auth: _reactImmutableProptypes.default.map,
  config: _reactImmutableProptypes.default.map,
  collections: _reactImmutableProptypes.default.orderedMap,
  loadConfig: _propTypes.default.func.isRequired,
  loginUser: _propTypes.default.func.isRequired,
  logoutUser: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map,
  isFetching: _propTypes.default.bool.isRequired,
  publishMode: _propTypes.default.oneOf([_publishModes.SIMPLE, _publishModes.EDITORIAL_WORKFLOW]),
  siteId: _propTypes.default.string,
  useMediaLibrary: _propTypes.default.bool,
  openMediaLibrary: _propTypes.default.func.isRequired,
  showMediaButton: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired
});

function mapStateToProps(state) {
  const {
    auth,
    config,
    collections,
    globalUI,
    mediaLibrary
  } = state;
  const user = auth && auth.get('user');
  const isFetching = globalUI.get('isFetching');
  const publishMode = config && config.get('publish_mode');
  const useMediaLibrary = !mediaLibrary.get('externalLibrary');
  const showMediaButton = mediaLibrary.get('showMediaButton');
  return {
    auth,
    config,
    collections,
    user,
    isFetching,
    publishMode,
    showMediaButton,
    useMediaLibrary
  };
}

const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  loadConfig: _config.loadConfig,
  loginUser: _auth.loginUser,
  logoutUser: _auth.logoutUser
};

var _default = (0, _reactHotLoader.hot)(module)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactPolyglot.translate)()(App)));

exports.default = _default;