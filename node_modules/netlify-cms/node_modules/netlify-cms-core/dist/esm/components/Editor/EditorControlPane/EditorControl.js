"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ControlHint = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _core = require("@emotion/core");

var _reactRedux = require("react-redux");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _registry = require("../../../lib/registry");

var _entries = require("../../../actions/entries");

var _media = require("../../../actions/media");

var _search = require("../../../actions/search");

var _mediaLibrary = require("../../../actions/mediaLibrary");

var _reducers = require("../../../reducers");

var _Widget = _interopRequireDefault(require("./Widget"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject10() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n                  ", ";\n                "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n                  ", ";\n                "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * This is a necessary bridge as we are still passing classnames to widgets
 * for styling. Once that changes we can stop storing raw style strings like
 * this.
 */
const styleStrings = {
  label: "\n    color: ".concat(_netlifyCmsUiDefault.colors.controlLabel, ";\n    background-color: ").concat(_netlifyCmsUiDefault.colors.textFieldBorder, ";\n    display: inline-block;\n    font-size: 12px;\n    text-transform: uppercase;\n    font-weight: 600;\n    border: 0;\n    border-radius: 3px 3px 0 0;\n    padding: 3px 6px 2px;\n    margin: 0;\n    transition: all ").concat(_netlifyCmsUiDefault.transitions.main, ";\n    position: relative;\n\n    /**\n     * Faux outside curve into top of input\n     */\n    &:before,\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: -4px;\n      height: 100%;\n      width: 4px;\n      background-color: inherit;\n    }\n\n    &:after {\n      border-bottom-left-radius: 3px;\n      background-color: #fff;\n    }\n  "),
  labelActive: "\n    background-color: ".concat(_netlifyCmsUiDefault.colors.active, ";\n    color: ").concat(_netlifyCmsUiDefault.colors.textLight, ";\n  "),
  labelError: "\n    background-color: ".concat(_netlifyCmsUiDefault.colors.errorText, ";\n    color: ").concat(_netlifyCmsUiDefault.colorsRaw.white, ";\n  "),
  widget: "\n    display: block;\n    width: 100%;\n    padding: ".concat(_netlifyCmsUiDefault.lengths.inputPadding, ";\n    margin: 0;\n    border: ").concat(_netlifyCmsUiDefault.borders.textField, ";\n    border-radius: ").concat(_netlifyCmsUiDefault.lengths.borderRadius, ";\n    border-top-left-radius: 0;\n    outline: 0;\n    box-shadow: none;\n    background-color: ").concat(_netlifyCmsUiDefault.colors.inputBackground, ";\n    color: #444a57;\n    transition: border-color ").concat(_netlifyCmsUiDefault.transitions.main, ";\n    position: relative;\n    font-size: 15px;\n    line-height: 1.5;\n\n    select& {\n      text-indent: 14px;\n      height: 58px;\n    }\n  "),
  widgetActive: "\n    border-color: ".concat(_netlifyCmsUiDefault.colors.active, ";\n  "),
  widgetError: "\n    border-color: ".concat(_netlifyCmsUiDefault.colors.errorText, ";\n  ")
};
const ControlContainer = (0, _styledBase.default)("div", {
  target: "ei073ck0",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ControlErrorsList = (0, _styledBase.default)("ul", {
  target: "ei073ck1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", _netlifyCmsUiDefault.colors.errorText, ";margin-bottom:5px;text-align:right;text-transform:uppercase;position:relative;font-weight:600;top:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlHint = (0, _styledBase.default)("p", {
  target: "ei073ck2",
  label: "ControlHint"
})("margin-bottom:0;padding:3px 0;font-size:12px;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : props.active ? _netlifyCmsUiDefault.colors.active : _netlifyCmsUiDefault.colors.controlLabel, ";transition:color ", _netlifyCmsUiDefault.transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ControlHint = ControlHint;

class EditorControl extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      activeLabel: false
    });

    _defineProperty(this, "uniqueFieldId", (0, _uniqueId2.default)("".concat(this.props.field.get('name'), "-field-")));
  }

  render() {
    const {
      value,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange: _onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      onValidate,
      processControlRef,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      t
    } = this.props;
    const widgetName = field.get('widget');
    const widget = (0, _registry.resolveWidget)(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    return (0, _core.jsx)(_core.ClassNames, null, (_ref) => {
      let {
        css,
        cx
      } = _ref;
      return (0, _core.jsx)(ControlContainer, null, widget.globalStyles && (0, _core.jsx)(_core.Global, {
        styles:
        /*#__PURE__*/
        (0, _core.css)(widget.globalStyles, "label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBNMkQiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvckNvbnRyb2xQYW5lL0VkaXRvckNvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGpzeCwgQ2xhc3NOYW1lcywgR2xvYmFsLCBjc3MgYXMgY29yZUNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcGFydGlhbCwgdW5pcXVlSWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNvbG9ycywgY29sb3JzUmF3LCB0cmFuc2l0aW9ucywgbGVuZ3RocywgYm9yZGVycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgcmVzb2x2ZVdpZGdldCwgZ2V0RWRpdG9yQ29tcG9uZW50cyB9IGZyb20gJ0xpYi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBjbGVhckZpZWxkRXJyb3JzLCBsb2FkRW50cnkgfSBmcm9tICdBY3Rpb25zL2VudHJpZXMnO1xuaW1wb3J0IHsgYWRkQXNzZXQgfSBmcm9tICdBY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IHF1ZXJ5LCBjbGVhclNlYXJjaCB9IGZyb20gJ0FjdGlvbnMvc2VhcmNoJztcbmltcG9ydCB7XG4gIG9wZW5NZWRpYUxpYnJhcnksXG4gIHJlbW92ZUluc2VydGVkTWVkaWEsXG4gIGNsZWFyTWVkaWFDb250cm9sLFxuICByZW1vdmVNZWRpYUNvbnRyb2wsXG59IGZyb20gJ0FjdGlvbnMvbWVkaWFMaWJyYXJ5JztcbmltcG9ydCB7IGdldEFzc2V0IH0gZnJvbSAnUmVkdWNlcnMnO1xuaW1wb3J0IFdpZGdldCBmcm9tICcuL1dpZGdldCc7XG5cbi8qKlxuICogVGhpcyBpcyBhIG5lY2Vzc2FyeSBicmlkZ2UgYXMgd2UgYXJlIHN0aWxsIHBhc3NpbmcgY2xhc3NuYW1lcyB0byB3aWRnZXRzXG4gKiBmb3Igc3R5bGluZy4gT25jZSB0aGF0IGNoYW5nZXMgd2UgY2FuIHN0b3Agc3RvcmluZyByYXcgc3R5bGUgc3RyaW5ncyBsaWtlXG4gKiB0aGlzLlxuICovXG5jb25zdCBzdHlsZVN0cmluZ3MgPSB7XG4gIGxhYmVsOiBgXG4gICAgY29sb3I6ICR7Y29sb3JzLmNvbnRyb2xMYWJlbH07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4IDNweCAwIDA7XG4gICAgcGFkZGluZzogM3B4IDZweCAycHg7XG4gICAgbWFyZ2luOiAwO1xuICAgIHRyYW5zaXRpb246IGFsbCAke3RyYW5zaXRpb25zLm1haW59O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIEZhdXggb3V0c2lkZSBjdXJ2ZSBpbnRvIHRvcCBvZiBpbnB1dFxuICAgICAqL1xuICAgICY6YmVmb3JlLFxuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIHJpZ2h0OiAtNHB4O1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgd2lkdGg6IDRweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgfVxuXG4gICAgJjphZnRlciB7XG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAzcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIH1cbiAgYCxcbiAgbGFiZWxBY3RpdmU6IGBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0TGlnaHR9O1xuICBgLFxuICBsYWJlbEVycm9yOiBgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZXJyb3JUZXh0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcud2hpdGV9O1xuICBgLFxuICB3aWRnZXQ6IGBcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAke2xlbmd0aHMuaW5wdXRQYWRkaW5nfTtcbiAgICBtYXJnaW46IDA7XG4gICAgYm9yZGVyOiAke2JvcmRlcnMudGV4dEZpZWxkfTtcbiAgICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xuICAgIG91dGxpbmU6IDA7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbnB1dEJhY2tncm91bmR9O1xuICAgIGNvbG9yOiAjNDQ0YTU3O1xuICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAke3RyYW5zaXRpb25zLm1haW59O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBmb250LXNpemU6IDE1cHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcblxuICAgIHNlbGVjdCYge1xuICAgICAgdGV4dC1pbmRlbnQ6IDE0cHg7XG4gICAgICBoZWlnaHQ6IDU4cHg7XG4gICAgfVxuICBgLFxuICB3aWRnZXRBY3RpdmU6IGBcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gIGAsXG4gIHdpZGdldEVycm9yOiBgXG4gICAgYm9yZGVyLWNvbG9yOiAke2NvbG9ycy5lcnJvclRleHR9O1xuICBgLFxufTtcblxuY29uc3QgQ29udHJvbENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDE2cHg7XG5cbiAgJjpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tdG9wOiAzNnB4O1xuICB9XG5gO1xuXG5jb25zdCBDb250cm9sRXJyb3JzTGlzdCA9IHN0eWxlZC51bGBcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy5lcnJvclRleHR9O1xuICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIHRvcDogMjBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBDb250cm9sSGludCA9IHN0eWxlZC5wYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuICBwYWRkaW5nOiAzcHggMDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtwcm9wcyA9PlxuICAgIHByb3BzLmVycm9yID8gY29sb3JzLmVycm9yVGV4dCA6IHByb3BzLmFjdGl2ZSA/IGNvbG9ycy5hY3RpdmUgOiBjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgdHJhbnNpdGlvbjogY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufTtcbmA7XG5cbmNsYXNzIEVkaXRvckNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICBdKSxcbiAgICBmaWVsZDogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGZpZWxkc01ldGFEYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgYm91bmRHZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25WYWxpZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJvY2Vzc0NvbnRyb2xSZWY6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNvbnRyb2xSZWY6IFByb3BUeXBlcy5mdW5jLFxuICAgIHF1ZXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHF1ZXJ5SGl0czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xlYXJTZWFyY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xlYXJGaWVsZEVycm9yczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2FkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBhY3RpdmVMYWJlbDogZmFsc2UsXG4gIH07XG5cbiAgdW5pcXVlRmllbGRJZCA9IHVuaXF1ZUlkKGAke3RoaXMucHJvcHMuZmllbGQuZ2V0KCduYW1lJyl9LWZpZWxkLWApO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGZpZWxkLFxuICAgICAgZmllbGRzTWV0YURhdGEsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBtZWRpYVBhdGhzLFxuICAgICAgYm91bmRHZXRBc3NldCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb3Blbk1lZGlhTGlicmFyeSxcbiAgICAgIGNsZWFyTWVkaWFDb250cm9sLFxuICAgICAgcmVtb3ZlTWVkaWFDb250cm9sLFxuICAgICAgYWRkQXNzZXQsXG4gICAgICByZW1vdmVJbnNlcnRlZE1lZGlhLFxuICAgICAgb25WYWxpZGF0ZSxcbiAgICAgIHByb2Nlc3NDb250cm9sUmVmLFxuICAgICAgY29udHJvbFJlZixcbiAgICAgIHF1ZXJ5LFxuICAgICAgcXVlcnlIaXRzLFxuICAgICAgaXNGZXRjaGluZyxcbiAgICAgIGNsZWFyU2VhcmNoLFxuICAgICAgY2xlYXJGaWVsZEVycm9ycyxcbiAgICAgIGxvYWRFbnRyeSxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgd2lkZ2V0TmFtZSA9IGZpZWxkLmdldCgnd2lkZ2V0Jyk7XG4gICAgY29uc3Qgd2lkZ2V0ID0gcmVzb2x2ZVdpZGdldCh3aWRnZXROYW1lKTtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZC5nZXQoJ25hbWUnKTtcbiAgICBjb25zdCBmaWVsZEhpbnQgPSBmaWVsZC5nZXQoJ2hpbnQnKTtcbiAgICBjb25zdCBpc0ZpZWxkT3B0aW9uYWwgPSBmaWVsZC5nZXQoJ3JlcXVpcmVkJykgPT09IGZhbHNlO1xuICAgIGNvbnN0IG9uVmFsaWRhdGVPYmplY3QgPSBvblZhbGlkYXRlO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gZmllbGRzTWV0YURhdGEgJiYgZmllbGRzTWV0YURhdGEuZ2V0KGZpZWxkTmFtZSk7XG4gICAgY29uc3QgZXJyb3JzID0gZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5nZXQodGhpcy51bmlxdWVGaWVsZElkKTtcbiAgICByZXR1cm4gKFxuICAgICAgPENsYXNzTmFtZXM+XG4gICAgICAgIHsoeyBjc3MsIGN4IH0pID0+IChcbiAgICAgICAgICA8Q29udHJvbENvbnRhaW5lcj5cbiAgICAgICAgICAgIHt3aWRnZXQuZ2xvYmFsU3R5bGVzICYmIDxHbG9iYWwgc3R5bGVzPXtjb3JlQ3NzYCR7d2lkZ2V0Lmdsb2JhbFN0eWxlc31gfSAvPn1cbiAgICAgICAgICAgIDxDb250cm9sRXJyb3JzTGlzdD5cbiAgICAgICAgICAgICAge2Vycm9ycyAmJlxuICAgICAgICAgICAgICAgIGVycm9ycy5tYXAoXG4gICAgICAgICAgICAgICAgICBlcnJvciA9PlxuICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17ZXJyb3IubWVzc2FnZS50cmltKCkucmVwbGFjZSgvW15hLXowLTldKy9naSwgJy0nKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZXJyb3IubWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0NvbnRyb2xFcnJvcnNMaXN0PlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3MubGFiZWx9O1xuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zdHlsZUFjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy5sYWJlbEFjdGl2ZX07XG4gICAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgICEhZXJyb3JzICYmXG4gICAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmxhYmVsRXJyb3J9O1xuICAgICAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgaHRtbEZvcj17dGhpcy51bmlxdWVGaWVsZElkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7YCR7ZmllbGQuZ2V0KCdsYWJlbCcsIGZpZWxkLmdldCgnbmFtZScpKX0ke2lzRmllbGRPcHRpb25hbCA/ICcgKG9wdGlvbmFsKScgOiAnJ31gfVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxXaWRnZXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lV3JhcHBlcj17Y3goXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3Mud2lkZ2V0fTtcbiAgICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldEFjdGl2ZX07XG4gICAgICAgICAgICAgICAgICBgXTogdGhpcy5zdGF0ZS5zdHlsZUFjdGl2ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldEVycm9yfTtcbiAgICAgICAgICAgICAgICAgIGBdOiAhIWVycm9ycyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBjbGFzc05hbWVXaWRnZXQ9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXR9O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWVXaWRnZXRBY3RpdmU9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXRBY3RpdmV9O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWVMYWJlbD17Y3NzYFxuICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmxhYmVsfTtcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lTGFiZWxBY3RpdmU9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy5sYWJlbEFjdGl2ZX07XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgIGNvbnRyb2xDb21wb25lbnQ9e3dpZGdldC5jb250cm9sfVxuICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICAgIHVuaXF1ZUZpZWxkSWQ9e3RoaXMudW5pcXVlRmllbGRJZH1cbiAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICBtZWRpYVBhdGhzPXttZWRpYVBhdGhzfVxuICAgICAgICAgICAgICBtZXRhZGF0YT17bWV0YWRhdGF9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsobmV3VmFsdWUsIG5ld01ldGFkYXRhKSA9PiBvbkNoYW5nZShmaWVsZE5hbWUsIG5ld1ZhbHVlLCBuZXdNZXRhZGF0YSl9XG4gICAgICAgICAgICAgIG9uVmFsaWRhdGU9e29uVmFsaWRhdGUgJiYgcGFydGlhbChvblZhbGlkYXRlLCB0aGlzLnVuaXF1ZUZpZWxkSWQpfVxuICAgICAgICAgICAgICBvbk9wZW5NZWRpYUxpYnJhcnk9e29wZW5NZWRpYUxpYnJhcnl9XG4gICAgICAgICAgICAgIG9uQ2xlYXJNZWRpYUNvbnRyb2w9e2NsZWFyTWVkaWFDb250cm9sfVxuICAgICAgICAgICAgICBvblJlbW92ZU1lZGlhQ29udHJvbD17cmVtb3ZlTWVkaWFDb250cm9sfVxuICAgICAgICAgICAgICBvblJlbW92ZUluc2VydGVkTWVkaWE9e3JlbW92ZUluc2VydGVkTWVkaWF9XG4gICAgICAgICAgICAgIG9uQWRkQXNzZXQ9e2FkZEFzc2V0fVxuICAgICAgICAgICAgICBnZXRBc3NldD17Ym91bmRHZXRBc3NldH1cbiAgICAgICAgICAgICAgaGFzQWN0aXZlU3R5bGU9e3RoaXMuc3RhdGUuc3R5bGVBY3RpdmV9XG4gICAgICAgICAgICAgIHNldEFjdGl2ZVN0eWxlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc3R5bGVBY3RpdmU6IHRydWUgfSl9XG4gICAgICAgICAgICAgIHNldEluYWN0aXZlU3R5bGU9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBzdHlsZUFjdGl2ZTogZmFsc2UgfSl9XG4gICAgICAgICAgICAgIHJlc29sdmVXaWRnZXQ9e3Jlc29sdmVXaWRnZXR9XG4gICAgICAgICAgICAgIGdldEVkaXRvckNvbXBvbmVudHM9e2dldEVkaXRvckNvbXBvbmVudHN9XG4gICAgICAgICAgICAgIHJlZj17cHJvY2Vzc0NvbnRyb2xSZWYgJiYgcGFydGlhbChwcm9jZXNzQ29udHJvbFJlZiwgZmllbGQpfVxuICAgICAgICAgICAgICBjb250cm9sUmVmPXtjb250cm9sUmVmfVxuICAgICAgICAgICAgICBlZGl0b3JDb250cm9sPXtDb25uZWN0ZWRFZGl0b3JDb250cm9sfVxuICAgICAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgICAgIGxvYWRFbnRyeT17bG9hZEVudHJ5fVxuICAgICAgICAgICAgICBxdWVyeUhpdHM9e3F1ZXJ5SGl0c31cbiAgICAgICAgICAgICAgY2xlYXJTZWFyY2g9e2NsZWFyU2VhcmNofVxuICAgICAgICAgICAgICBjbGVhckZpZWxkRXJyb3JzPXtjbGVhckZpZWxkRXJyb3JzfVxuICAgICAgICAgICAgICBpc0ZldGNoaW5nPXtpc0ZldGNoaW5nfVxuICAgICAgICAgICAgICBmaWVsZHNFcnJvcnM9e2ZpZWxkc0Vycm9yc31cbiAgICAgICAgICAgICAgb25WYWxpZGF0ZU9iamVjdD17b25WYWxpZGF0ZU9iamVjdH1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7ZmllbGRIaW50ICYmIChcbiAgICAgICAgICAgICAgPENvbnRyb2xIaW50IGFjdGl2ZT17dGhpcy5zdGF0ZS5zdHlsZUFjdGl2ZX0gZXJyb3I9eyEhZXJyb3JzfT5cbiAgICAgICAgICAgICAgICB7ZmllbGRIaW50fVxuICAgICAgICAgICAgICA8L0NvbnRyb2xIaW50PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0NvbnRyb2xDb250YWluZXI+XG4gICAgICAgICl9XG4gICAgICA8L0NsYXNzTmFtZXM+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICBtZWRpYVBhdGhzOiBzdGF0ZS5tZWRpYUxpYnJhcnkuZ2V0KCdjb250cm9sTWVkaWEnKSxcbiAgYm91bmRHZXRBc3NldDogZ2V0QXNzZXQuYmluZChudWxsLCBzdGF0ZSksXG4gIGlzRmV0Y2hpbmc6IHN0YXRlLnNlYXJjaC5nZXQoJ2lzRmV0Y2hpbmcnKSxcbiAgcXVlcnlIaXRzOiBzdGF0ZS5zZWFyY2guZ2V0KCdxdWVyeUhpdHMnKSxcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIG9wZW5NZWRpYUxpYnJhcnksXG4gIGNsZWFyTWVkaWFDb250cm9sLFxuICByZW1vdmVNZWRpYUNvbnRyb2wsXG4gIHJlbW92ZUluc2VydGVkTWVkaWEsXG4gIGFkZEFzc2V0LFxuICBxdWVyeSxcbiAgbG9hZEVudHJ5OiAoY29sbGVjdGlvbk5hbWUsIHNsdWcpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gZ2V0U3RhdGUoKS5jb2xsZWN0aW9ucy5nZXQoY29sbGVjdGlvbk5hbWUpO1xuICAgIHJldHVybiBsb2FkRW50cnkoY29sbGVjdGlvbiwgc2x1ZykoZGlzcGF0Y2gsIGdldFN0YXRlKTtcbiAgfSxcbiAgY2xlYXJTZWFyY2gsXG4gIGNsZWFyRmllbGRFcnJvcnMsXG59O1xuXG5jb25zdCBDb25uZWN0ZWRFZGl0b3JDb250cm9sID0gY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHMsXG4gIG51bGwsXG4gIHsgd2l0aFJlZjogdHJ1ZSB9LFxuKSh0cmFuc2xhdGUoKShFZGl0b3JDb250cm9sKSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbm5lY3RlZEVkaXRvckNvbnRyb2w7XG4iXX0= */"))
      }), (0, _core.jsx)(ControlErrorsList, null, errors && errors.map(error => error.message && typeof error.message === 'string' && (0, _core.jsx)("li", {
        key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
      }, error.message))), (0, _core.jsx)("label", {
        className: cx(css(_templateObject(), styleStrings.label), this.state.styleActive && css(_templateObject2(), styleStrings.labelActive), !!errors && css(_templateObject3(), styleStrings.labelError)),
        htmlFor: this.uniqueFieldId
      }, "".concat(field.get('label', field.get('name'))).concat(isFieldOptional ? ' (optional)' : '')), (0, _core.jsx)(_Widget.default, {
        classNameWrapper: cx(css(_templateObject4(), styleStrings.widget), {
          [css(_templateObject5(), styleStrings.widgetActive)]: this.state.styleActive
        }, {
          [css(_templateObject6(), styleStrings.widgetError)]: !!errors
        }),
        classNameWidget: css(_templateObject7(), styleStrings.widget),
        classNameWidgetActive: css(_templateObject8(), styleStrings.widgetActive),
        classNameLabel: css(_templateObject9(), styleStrings.label),
        classNameLabelActive: css(_templateObject10(), styleStrings.labelActive),
        controlComponent: widget.control,
        field: field,
        uniqueFieldId: this.uniqueFieldId,
        value: value,
        mediaPaths: mediaPaths,
        metadata: metadata,
        onChange: (newValue, newMetadata) => _onChange(fieldName, newValue, newMetadata),
        onValidate: onValidate && (0, _partial2.default)(onValidate, this.uniqueFieldId),
        onOpenMediaLibrary: openMediaLibrary,
        onClearMediaControl: clearMediaControl,
        onRemoveMediaControl: removeMediaControl,
        onRemoveInsertedMedia: removeInsertedMedia,
        onAddAsset: addAsset,
        getAsset: boundGetAsset,
        hasActiveStyle: this.state.styleActive,
        setActiveStyle: () => this.setState({
          styleActive: true
        }),
        setInactiveStyle: () => this.setState({
          styleActive: false
        }),
        resolveWidget: _registry.resolveWidget,
        getEditorComponents: _registry.getEditorComponents,
        ref: processControlRef && (0, _partial2.default)(processControlRef, field),
        controlRef: controlRef,
        editorControl: ConnectedEditorControl,
        query: query,
        loadEntry: loadEntry,
        queryHits: queryHits,
        clearSearch: clearSearch,
        clearFieldErrors: clearFieldErrors,
        isFetching: isFetching,
        fieldsErrors: fieldsErrors,
        onValidateObject: onValidateObject,
        t: t
      }), fieldHint && (0, _core.jsx)(ControlHint, {
        active: this.state.styleActive,
        error: !!errors
      }, fieldHint));
    });
  }

}

_defineProperty(EditorControl, "propTypes", {
  value: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
  field: _reactImmutableProptypes.default.map.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map,
  fieldsErrors: _reactImmutableProptypes.default.map,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  boundGetAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  addAsset: _propTypes.default.func.isRequired,
  removeInsertedMedia: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func,
  processControlRef: _propTypes.default.func,
  controlRef: _propTypes.default.func,
  query: _propTypes.default.func.isRequired,
  queryHits: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
  isFetching: _propTypes.default.bool,
  clearSearch: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  loadEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

const mapStateToProps = state => ({
  mediaPaths: state.mediaLibrary.get('controlMedia'),
  boundGetAsset: _reducers.getAsset.bind(null, state),
  isFetching: state.search.get('isFetching'),
  queryHits: state.search.get('queryHits')
});

const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  clearMediaControl: _mediaLibrary.clearMediaControl,
  removeMediaControl: _mediaLibrary.removeMediaControl,
  removeInsertedMedia: _mediaLibrary.removeInsertedMedia,
  addAsset: _media.addAsset,
  query: _search.query,
  loadEntry: (collectionName, slug) => (dispatch, getState) => {
    const collection = getState().collections.get(collectionName);
    return (0, _entries.loadEntry)(collection, slug)(dispatch, getState);
  },
  clearSearch: _search.clearSearch,
  clearFieldErrors: _entries.clearFieldErrors
};
const ConnectedEditorControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, null, {
  withRef: true
})((0, _reactPolyglot.translate)()(EditorControl));
var _default = ConnectedEditorControl;
exports.default = _default;