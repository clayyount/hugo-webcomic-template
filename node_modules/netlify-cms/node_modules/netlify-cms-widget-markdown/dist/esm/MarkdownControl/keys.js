"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slate = require("slate");

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = onKeyDown;
exports.default = _default;

function onKeyDown(event, change) {
  const createDefaultBlock = () => {
    return _slate.Block.create({
      type: 'paragraph',
      nodes: [_slate.Text.create('')]
    });
  };

  if ((0, _isHotkey.default)('Enter', event)) {
    /**
     * If "Enter" is pressed while a single void block is selected, a new
     * paragraph should be added above or below it, and the current selection
     * (range) should be collapsed to the start of the new paragraph.
     *
     * If the selected block is the first block in the document, create the
     * new block above it. If not, create the new block below it.
     */
    const {
      document: doc,
      anchorBlock,
      focusBlock
    } = change.value;
    const singleBlockSelected = anchorBlock === focusBlock;
    if (!singleBlockSelected || !focusBlock.isVoid) return;
    event.preventDefault();
    const focusBlockParent = doc.getParent(focusBlock.key);
    const focusBlockIndex = focusBlockParent.nodes.indexOf(focusBlock);
    const focusBlockIsFirstChild = focusBlockIndex === 0;
    const newBlock = createDefaultBlock();
    const newBlockIndex = focusBlockIsFirstChild ? 0 : focusBlockIndex + 1;
    return change.insertNodeByKey(focusBlockParent.key, newBlockIndex, newBlock).collapseToStartOf(newBlock);
  }

  const marks = [['b', 'bold'], ['i', 'italic'], ['s', 'strikethrough'], ['`', 'code']];
  const [, markName] = marks.find((_ref) => {
    let [key] = _ref;
    return (0, _isHotkey.default)("mod+".concat(key), event);
  }) || [];

  if (markName) {
    event.preventDefault();
    return change.toggleMark(markName);
  }
}