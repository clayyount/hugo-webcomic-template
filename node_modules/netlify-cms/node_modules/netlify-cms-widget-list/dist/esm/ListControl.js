"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _reactSortableHoc = require("react-sortable-hoc");

var _netlifyCmsWidgetObject = _interopRequireDefault(require("netlify-cms-widget-object"));

var _typedListHelpers = require("./typedListHelpers");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n                ", "\n              "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n                  ", ";\n                "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function valueToString(value) {
  return value ? value.join(',').replace(/,([^\s]|$)/g, ', $1') : '';
}

const ObjectControl = _netlifyCmsWidgetObject.default.controlComponent;
const ListItem = (0, _styledBase.default)("div", {
  target: "e14bfka80",
  label: "ListItem"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SortableListItem = (0, _reactSortableHoc.SortableElement)(ListItem);
const StyledListItemTopBar = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.ListItemTopBar, {
  target: "e14bfka81",
  label: "StyledListItemTopBar"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NestedObjectLabel = (0, _styledBase.default)("div", {
  target: "e14bfka82",
  label: "NestedObjectLabel"
})("display:", props => props.collapsed ? 'block' : 'none', ";border-top:0;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : 'inherit', ";background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";padding:13px;border-radius:0 0 ", _netlifyCmsUiDefault.lengths.borderRadius, " ", _netlifyCmsUiDefault.lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const styleStrings = {
  collapsedObjectControl: "\n    display: none;\n  ",
  objectWidgetTopBarContainer: "\n    padding: ".concat(_netlifyCmsUiDefault.lengths.objectWidgetTopBarContainerPadding, ";\n  ")
};
const styles = {
  listControlItem: process.env.NODE_ENV === "production" ? {
    name: "zbp1o3-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;}label:listControlItem;"
  } : {
    name: "zbp1o3-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;}label:listControlItem;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  listControlItemCollapsed: process.env.NODE_ENV === "production" ? {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;"
  } : {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  }
};
const SortableList = (0, _reactSortableHoc.SortableContainer)((_ref) => {
  let {
    items,
    renderItem
  } = _ref;
  return (0, _core.jsx)("div", null, items.map(renderItem));
});
const valueTypes = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE',
  MIXED: 'MIXED'
};

class ListControl extends _react.default.Component {
  constructor(props) {
    var _this;

    super(props);
    _this = this;

    _defineProperty(this, "validations", []);

    _defineProperty(this, "getValueType", () => {
      const {
        field
      } = this.props;

      if (field.get('fields')) {
        return valueTypes.MULTIPLE;
      } else if (field.get('field')) {
        return valueTypes.SINGLE;
      } else if (field.get(_typedListHelpers.TYPES_KEY)) {
        return valueTypes.MIXED;
      } else {
        return null;
      }
    });

    _defineProperty(this, "handleChange", e => {
      const {
        onChange
      } = this.props;
      const oldValue = this.state.value;
      const newValue = e.target.value;
      const listValue = e.target.value.split(',');

      if (newValue.match(/,$/) && oldValue.match(/, $/)) {
        listValue.pop();
      }

      const parsedValue = valueToString(listValue);
      this.setState({
        value: parsedValue
      });
      onChange(listValue.map(val => val.trim()));
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.setActiveStyle();
    });

    _defineProperty(this, "handleBlur", e => {
      const listValue = e.target.value.split(',').map(el => el.trim()).filter(el => el);
      this.setState({
        value: valueToString(listValue)
      });
      this.props.setInactiveStyle();
    });

    _defineProperty(this, "handleAdd", e => {
      e.preventDefault();
      const {
        value,
        onChange,
        field
      } = this.props;
      const parsedValue = this.getValueType() === valueTypes.SINGLE ? this.singleDefault() : (0, _immutable.fromJS)(this.multipleDefault(field.get('fields')));
      this.setState({
        itemsCollapsed: this.state.itemsCollapsed.push(false)
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "singleDefault", () => {
      return this.props.field.getIn(['field', 'default'], null);
    });

    _defineProperty(this, "multipleDefault", fields => {
      return this.getFieldsDefault(fields);
    });

    _defineProperty(this, "handleAddType", (type, typeKey) => {
      const {
        value,
        onChange
      } = this.props;
      let parsedValue = (0, _immutable.fromJS)(this.mixedDefault(typeKey, type));
      this.setState({
        itemsCollapsed: this.state.itemsCollapsed.push(false)
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "mixedDefault", (typeKey, type) => {
      const selectedType = this.props.field.get(_typedListHelpers.TYPES_KEY).find(f => f.get('name') === type);
      const fields = selectedType.get('fields') || [selectedType.get('field')];
      return this.getFieldsDefault(fields, {
        [typeKey]: type
      });
    });

    _defineProperty(this, "getFieldsDefault", function (fields) {
      let initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return fields.reduce((acc, item) => {
        const subfields = item.get('field') || item.get('fields');
        const object = item.get('widget') == 'object';
        const name = item.get('name');
        const defaultValue = item.get('default', null);

        if (_immutable.List.isList(subfields) && object) {
          const subDefaultValue = _this.getFieldsDefault(subfields);

          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (_immutable.Map.isMap(subfields) && object) {
          const subDefaultValue = _this.getFieldsDefault([subfields]);

          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (defaultValue !== null) {
          acc[name] = defaultValue;
        }

        return acc;
      }, initialValue);
    });

    _defineProperty(this, "processControlRef", ref => {
      if (!ref) return;
      this.validations.push(ref.validate);
    });

    _defineProperty(this, "validate", () => {
      this.validations.forEach(validateListItem => {
        validateListItem();
      });
    });

    _defineProperty(this, "getObjectValue", idx => this.props.value.get(idx) || (0, _immutable.Map)());

    _defineProperty(this, "handleRemove", (index, event) => {
      event.preventDefault();
      const {
        itemsCollapsed
      } = this.state;
      const {
        value,
        metadata,
        onChange,
        field,
        clearFieldErrors
      } = this.props;
      const collectionName = field.get('name');
      const isSingleField = this.getValueType() === valueTypes.SINGLE;
      const metadataRemovePath = isSingleField ? value.get(index) : value.get(index).valueSeq();
      const parsedMetadata = metadata && {
        [collectionName]: metadata.removeIn(metadataRemovePath)
      }; // Removed item object index is the last item in the list

      const removedItemIndex = value.count() - 1;
      this.setState({
        itemsCollapsed: itemsCollapsed.delete(index)
      });
      onChange(value.remove(index), parsedMetadata);
      clearFieldErrors(); // Remove deleted item object validation

      if (this.validations) {
        this.validations.splice(removedItemIndex, 1);
      }
    });

    _defineProperty(this, "handleItemCollapseToggle", (index, event) => {
      event.preventDefault();
      const {
        itemsCollapsed
      } = this.state;
      const collapsed = itemsCollapsed.get(index);
      this.setState({
        itemsCollapsed: itemsCollapsed.set(index, !collapsed)
      });
    });

    _defineProperty(this, "handleCollapseAllToggle", e => {
      e.preventDefault();
      const {
        value
      } = this.props;
      const {
        itemsCollapsed
      } = this.state;
      const allItemsCollapsed = itemsCollapsed.every(val => val === true);
      this.setState({
        itemsCollapsed: (0, _immutable.List)(Array(value.size).fill(!allItemsCollapsed))
      });
    });

    _defineProperty(this, "onSortEnd", (_ref2) => {
      let {
        oldIndex,
        newIndex
      } = _ref2;
      const {
        value
      } = this.props;
      const {
        itemsCollapsed
      } = this.state; // Update value

      const item = value.get(oldIndex);
      const newValue = value.delete(oldIndex).insert(newIndex, item);
      this.props.onChange(newValue); // Update collapsing

      const collapsed = itemsCollapsed.get(oldIndex);
      const updatedItemsCollapsed = itemsCollapsed.delete(oldIndex).insert(newIndex, collapsed);
      this.setState({
        itemsCollapsed: updatedItemsCollapsed
      });
    });

    _defineProperty(this, "renderItem", (item, index) => {
      const {
        classNameWrapper,
        editorControl,
        onValidateObject,
        metadata,
        clearFieldErrors,
        fieldsErrors,
        controlRef,
        resolveWidget
      } = this.props;
      const {
        itemsCollapsed
      } = this.state;
      const collapsed = itemsCollapsed.get(index);
      let field = this.props.field;

      if (this.getValueType() === valueTypes.MIXED) {
        field = (0, _typedListHelpers.getTypedFieldForValue)(field, item);

        if (!field) {
          return this.renderErroneousTypedItem(index, item);
        }
      }

      return (0, _core.jsx)(SortableListItem, {
        css:
        /*#__PURE__*/
        (0, _css2.default)([styles.listControlItem, collapsed && styles.listControlItemCollapsed], "label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        index: index,
        key: "item-".concat(index)
      }, (0, _core.jsx)(StyledListItemTopBar, {
        collapsed: collapsed,
        onCollapseToggle: (0, _partial2.default)(this.handleItemCollapseToggle, index),
        onRemove: (0, _partial2.default)(this.handleRemove, index),
        dragHandleHOC: _reactSortableHoc.SortableHandle
      }), (0, _core.jsx)(NestedObjectLabel, {
        collapsed: collapsed
      }, this.objectLabel(item)), (0, _core.jsx)(_core.ClassNames, null, (_ref3) => {
        let {
          css,
          cx
        } = _ref3;
        return (0, _core.jsx)(ObjectControl, {
          classNameWrapper: cx(classNameWrapper, {
            [css(_templateObject(), styleStrings.collapsedObjectControl)]: collapsed
          }),
          value: item,
          field: field,
          onChangeObject: this.handleChangeFor(index),
          editorControl: editorControl,
          resolveWidget: resolveWidget,
          metadata: metadata,
          forList: true,
          onValidateObject: onValidateObject,
          clearFieldErrors: clearFieldErrors,
          fieldsErrors: fieldsErrors,
          ref: this.processControlRef,
          controlRef: controlRef
        });
      }));
    });

    const {
      field: _field,
      value: _value
    } = props;

    const _allItemsCollapsed = _field.get('collapsed', true);

    const _itemsCollapsed = _value && Array(_value.size).fill(_allItemsCollapsed);

    this.state = {
      itemsCollapsed: (0, _immutable.List)(_itemsCollapsed),
      value: valueToString(_value)
    };
  }

  /**
   * Always update so that each nested widget has the option to update. This is
   * required because ControlHOC provides a default `shouldComponentUpdate`
   * which only updates if the value changes, but every widget must be allowed
   * to override this.
   */
  shouldComponentUpdate() {
    return true;
  }

  handleChangeFor(index) {
    return (fieldName, newValue, newMetadata) => {
      const {
        value,
        metadata,
        onChange,
        field
      } = this.props;
      const collectionName = field.get('name');
      const newObjectValue = this.getValueType() !== valueTypes.SINGLE ? this.getObjectValue(index).set(fieldName, newValue) : newValue;
      const parsedMetadata = {
        [collectionName]: Object.assign(metadata ? metadata.toJS() : {}, newMetadata || {})
      };
      onChange(value.set(index, newObjectValue), parsedMetadata);
    };
  }

  objectLabel(item) {
    const {
      field
    } = this.props;

    if (this.getValueType() === valueTypes.MIXED) {
      return (0, _typedListHelpers.getTypedFieldForValue)(field, item).get('label', field.get('name'));
    }

    const multiFields = field.get('fields');
    const singleField = field.get('field');
    const labelField = multiFields && multiFields.first() || singleField;
    const value = multiFields ? item.get(multiFields.first().get('name')) : singleField.get('label');
    return (value || "No ".concat(labelField.get('name'))).toString();
  }

  renderErroneousTypedItem(index, item) {
    const field = this.props.field;
    const errorMessage = (0, _typedListHelpers.getErrorMessageForTypedFieldAndValue)(field, item);
    return (0, _core.jsx)(SortableListItem, {
      css:
      /*#__PURE__*/
      (0, _css2.default)([styles.listControlItem, styles.listControlItemCollapsed], "label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
      index: index,
      key: "item-".concat(index)
    }, (0, _core.jsx)(StyledListItemTopBar, {
      onCollapseToggle: null,
      onRemove: (0, _partial2.default)(this.handleRemove, index),
      dragHandleHOC: _reactSortableHoc.SortableHandle
    }), (0, _core.jsx)(NestedObjectLabel, {
      collapsed: true,
      error: true
    }, errorMessage));
  }

  renderListControl() {
    const {
      value,
      forID,
      field,
      classNameWrapper
    } = this.props;
    const {
      itemsCollapsed
    } = this.state;
    const items = value || (0, _immutable.List)();
    const label = field.get('label', field.get('name'));
    const labelSingular = field.get('label_singular') || field.get('label', field.get('name'));
    const listLabel = items.size === 1 ? labelSingular.toLowerCase() : label.toLowerCase();
    return (0, _core.jsx)(_core.ClassNames, null, (_ref4) => {
      let {
        cx,
        css
      } = _ref4;
      return (0, _core.jsx)("div", {
        id: forID,
        className: cx(classNameWrapper, css(_templateObject2(), styleStrings.objectWidgetTopBarContainer))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.ObjectWidgetTopBar, {
        allowAdd: field.get('allow_add', true),
        onAdd: this.handleAdd,
        types: field.get(_typedListHelpers.TYPES_KEY, null),
        onAddType: type => this.handleAddType(type, (0, _typedListHelpers.resolveFieldKeyType)(field)),
        heading: "".concat(items.size, " ").concat(listLabel),
        label: labelSingular.toLowerCase(),
        onCollapseToggle: this.handleCollapseAllToggle,
        collapsed: itemsCollapsed.every(val => val === true)
      }), (0, _core.jsx)(SortableList, {
        items: items,
        renderItem: this.renderItem,
        onSortEnd: this.onSortEnd,
        useDragHandle: true,
        lockAxis: "y"
      }));
    });
  }

  renderInput() {
    const {
      forID,
      classNameWrapper
    } = this.props;
    const {
      value
    } = this.state;
    return (0, _core.jsx)("input", {
      type: "text",
      id: forID,
      value: value,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: classNameWrapper
    });
  }

  render() {
    if (this.getValueType() !== null) {
      return this.renderListControl();
    } else {
      return this.renderInput();
    }
  }

}

exports.default = ListControl;

_defineProperty(ListControl, "propTypes", {
  metadata: _reactImmutableProptypes.default.map,
  onChange: _propTypes.default.func.isRequired,
  onChangeObject: _propTypes.default.func.isRequired,
  onValidateObject: _propTypes.default.func.isRequired,
  value: _reactImmutableProptypes.default.list,
  field: _propTypes.default.object,
  forID: _propTypes.default.string,
  controlRef: _propTypes.default.func,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onOpenMediaLibrary: _propTypes.default.func.isRequired,
  onAddAsset: _propTypes.default.func.isRequired,
  onRemoveInsertedMedia: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  editorControl: _propTypes.default.func.isRequired,
  resolveWidget: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired
});

_defineProperty(ListControl, "defaultProps", {
  value: (0, _immutable.List)()
});